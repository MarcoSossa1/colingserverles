@page "/idioma/editar/{id}"
@using Coling.Shared
@inject IIdiomaService idiomaService
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Idioma</h3>

@if (idioma != null)
{
    <EditForm EditContext="contextoEdicion" OnValidSubmit="EditarIdioma">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label>Nombre:</label>
            <div>
                <InputText class="form-control" @bind-Value="@idioma.NombreIdioma" />
                <ValidationMessage For="@(() => idioma.NombreIdioma)" />
            </div>
        </div>
        <div class="mb-3">
            <label>Estado:</label>
            <div>
                <select class="form-control" @bind="@idioma.Estado">
                    <option value="Activo">Activo</option>
                    <option value="Inactivo">Inactivo</option>
                </select>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
        <button class="btn btn-primary" @onclick="CancelarEdicion">Cancelar</button>
    </EditForm>
}
else
{
    <p>Cargando...</p>
}

@code {
    private EditContext contextoEdicion;
    private Idioma idioma;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(id, out int parsedId))
        {
            string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
            // Obtener datos del idioma a editar
            idioma = await idiomaService.ObtenerIdiomaPorId(parsedId, token);
            if (idioma != null)
            {
                contextoEdicion = new EditContext(idioma);
            }
        }
    }

    private async Task EditarIdioma()
    {
        if (contextoEdicion.Validate())
        {
            string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
            bool exito = await idiomaService.EditarIdioma(idioma, token);

            if (exito)
            {
                navigationManager.NavigateTo("/idiomas");
            }
            else
            {
                await sweetAlertService.FireAsync("Error", "No se pudo editar el idioma", SweetAlertIcon.Error);
            }
        }
    }

    private async Task CancelarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de cancelar la edición? Los cambios no guardados se perderán.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            navigationManager.NavigateTo("/idiomas", forceLoad: true);
        }
    }
}
