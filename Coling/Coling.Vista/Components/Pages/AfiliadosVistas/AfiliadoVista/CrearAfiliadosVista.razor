@page "/afiliado/crear"
@using Coling.Shared
@inject IAfiliadoService afiliadoService
@inject IPersonaService personaService
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Crear Afiliado</h3>

<EditForm EditContext="contextoEdicion">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Fecha de Afiliación:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@afiliado.FechaAfiliacion" />
            <ValidationMessage For="@(() => afiliado.FechaAfiliacion)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Código de Afiliado:</label>
        <div>
            <InputText class="form-control" @bind-Value="@afiliado.CodigoAfiliado" />
            <ValidationMessage For="@(() => afiliado.CodigoAfiliado)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Número de Título Provisional:</label>
        <div>
            <InputText class="form-control" @bind-Value="@afiliado.NroTituloProvisional" />
            <ValidationMessage For="@(() => afiliado.NroTituloProvisional)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Persona:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="@afiliado.IdPersona">
                @foreach (var persona in Personas.Where(p => p.Estado == "Activo"))
                {
                    <option value="@persona.Id">@($"{persona.Nombre} {persona.Apellidos}")</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => afiliado.IdPersona)" />
        </div>
    </div>
    <button class="btn btn-primary" @onclick="CrearAfiliado">Guardar</button>
    <button class="btn btn-primary" @onclick="CancelarEdicion">Cancelar</button>
</EditForm>

@code {
    private EditContext contextoEdicion;
    private Afiliado afiliado = new Afiliado();
    private List<Persona> Personas = new List<Persona>();

    protected override async Task OnInitializedAsync()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
        contextoEdicion = new EditContext(afiliado);
        afiliado.FechaAfiliacion = DateTime.Today;
        Personas = await personaService.ListaPersonas(token);
    }

    private async Task CrearAfiliado()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
        afiliado.Estado = "Activo";
        var exito = await afiliadoService.InsertarAfiliado(afiliado, token);

        if (exito)
        {
            navigationManager.NavigateTo("/afiliados");
        }
        else
        {
            await sweetAlertService.FireAsync("Error", "No se pudo crear el afiliado", SweetAlertIcon.Error);
        }
    }

    private async Task CancelarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de cancelar la creación del afiliado? Los cambios no guardados se perderán.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            navigationManager.NavigateTo("/afiliados");
        }
    }
}
