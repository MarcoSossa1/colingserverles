@page "/personas"
@using Coling.Shared
@inject IPersonaService personaService
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Listar Personas</h3>

<div class="form-group row">
    <div class="col-sm-10">
        <a href="/persona/crear" class="btn btn-primary m-1">Agregar Nuevo</a>
    </div>
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th><strong>Nombre</strong></th>
                <th><strong>Apellidos</strong></th>
                <th><strong>Fecha de Nacimiento</strong></th>
                <th><strong>Estado</strong></th>
                <th><strong>Acciones</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in PersonasLista)
            {
                <tr>
                    <td>@persona.Nombre</td>
                    <td>@persona.Apellidos</td>
                    <td>@persona.FechaNacimiento.ToShortDateString()</td>
                    <td>@persona.Estado</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>EditarPersona(persona.Id)">Editar</button>

                        <button class="btn btn-danger" @onclick="() => ConfirmarBorrarPersona(persona.Id)">Borrar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<Persona> PersonasLista { get; set; } = new List<Persona>();

    protected override async Task OnInitializedAsync()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
        var response = await personaService.ListaPersonas(token);
        PersonasLista = response;
    }

    private void EditarPersona(int id)
    {
        navigationManager.NavigateTo($"/persona/editar/{id}");
    }


    private async Task ConfirmarBorrarPersona(int id)
    {
        var resultado = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro de borrar esta persona?",
                Text = "Esta acción no se puede deshacer",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "Cancelar"
            });

        if (resultado.IsConfirmed)
        {
            await BorrarPersona(id);
        }
    }

    private async Task BorrarPersona(int id)
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY"; // Obtén el token de autenticación de alguna manera
        var exito = await personaService.BorrarPersona(id, token);

        if (exito)
        {
            navigationManager.NavigateTo("/personas", forceLoad: true);
        }
        else
        {
            await sweetAlertService.FireAsync("Error", "No se pudo borrar la persona", SweetAlertIcon.Error);
        }
    }
}