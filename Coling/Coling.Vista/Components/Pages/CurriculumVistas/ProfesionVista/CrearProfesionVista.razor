@page "/profesiones/crear"
@inject IProfesionService servicioProfesion
@inject IGradoAcademicoService servicioGrado
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Crear Profesión</h3>

<EditForm EditContext="contextoEdicion">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Nombre de la Profesión:</label>
        <div>
            <InputText class="form-control" @bind-Value="@profesion.NombreProfesion" />
            <ValidationMessage For="@(() => profesion.NombreProfesion)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Grado:</label>
        <div>
            <select class="form-control" @bind="@profesion.Grado">
                @foreach (var grado in GradosAcademicos.Where(g => g.Estado == "Activo"))
                {
                    <option value="@grado.NombreGrado">@grado.NombreGrado</option>
                }
            </select>
            <ValidationMessage For="@(() => @profesion.Grado)" />
        </div>
    </div>
    <button class="btn btn-primary" @onclick="CrearProfesion">Guardar</button>
    <button class="btn btn-primary" @onclick="CancelarEdicion">Cancelar</button>
</EditForm>

@code {
    private EditContext contextoEdicion;
    private Profesion profesion = new();

    protected override void OnInitialized()
    {
        contextoEdicion = new EditContext(profesion);
    }
    private List<GradoAcademico> GradosAcademicos { get; set; } = new List<GradoAcademico>();
    protected override async Task OnInitializedAsync()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
        var respuesta = await servicioGrado.ListaGradosAcademicos(token);
        GradosAcademicos = respuesta.Where(g => g.Estado == "Activo").ToList();
    }
    private async Task CrearProfesion()
    {
        if (contextoEdicion.Validate())
        {
            string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
            profesion.PartitionKey = "Profesiones";
            profesion.Estado = "Activo";
            var respuesta = await servicioProfesion.InsertarProfesion(profesion, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
                return;
            }
            nav.NavigateTo("/profesiones", forceLoad: true);
        }
    }
    private async Task CancelarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de cancelar la creación de la profesión? Los cambios no guardados se perderán.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            nav.NavigateTo("/profesiones", forceLoad: true);
        }
    }
}
