@page "/profesiones/editar/{rowKey}"

@inject IProfesionService servicioProfesion
@inject IGradoAcademicoService servicioGrado
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Editar Profesión</h3>

@if (profesion != null)
{
    <EditForm EditContext="contextoEdicion">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label>Nombre de la Profesión:</label>
            <div>
                <InputText class="form-control" @bind-Value="@profesion.NombreProfesion" />
                <ValidationMessage For="@(() => profesion.NombreProfesion)" />
            </div>
        </div>
        <div class="mb-3">
            <label>Grado:</label>
            <div>
                <select class="form-control" @bind="@profesion.Grado">
                    @foreach (var grado in GradosAcademicos.Where(g => g.Estado == "Activo"))
                    {
                        <option value="@grado.NombreGrado">@grado.NombreGrado</option>
                    }
                </select>
                <ValidationMessage For="@(() => @profesion.Grado)" />
            </div>
        </div>
        <div class="mb-3">
            <label>Estado:</label>
            <div>
                <select class="form-control" @bind="@profesion.Estado">
                    <option value="Activo">Activo</option>
                    <option value="Inactivo">Inactivo</option>
                </select>
            </div>
        </div>
        <button class="btn btn-primary" @onclick="EditarProfesion">Editar</button>
        <button class="btn btn-primary" @onclick="CancelarEdicion">Cancelar</button> <!-- Modificado -->
    </EditForm>
}
else
{
    <p>Cargando...</p>
}

@code {
    private EditContext contextoEdicion;
    private Profesion profesion;

    [Parameter]
    public string rowKey { get; set; }

    private List<GradoAcademico> GradosAcademicos { get; set; } = new List<GradoAcademico>();

    protected override async Task OnInitializedAsync()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
        // Obtener datos de la profesión a editar
        profesion = await servicioProfesion.ObtenerProfesionPorRowKey(rowKey, token);
        if (profesion != null)
        {
            contextoEdicion = new EditContext(profesion);
        }

        // Cargar lista de grados académicos activos
        var respuestaGrados = await servicioGrado.ListaGradosAcademicos(token);
        GradosAcademicos = respuestaGrados.Where(g => g.Estado == "Activo").ToList();
    }

    private async Task EditarProfesion()
    {
        if (contextoEdicion.Validate())
        {
            string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY"; // Reemplaza con tu token válido
            bool exito = await servicioProfesion.EditarProfesion(profesion, token);

            if (exito)
            {
                nav.NavigateTo("/profesiones");
            }
            else
            {
                await sweetAlertService.FireAsync("Error", "No se pudo editar la profesión", SweetAlertIcon.Error);
            }
        }
    }

    private async Task CancelarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de cancelar la edición? Los cambios no guardados se perderán.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            nav.NavigateTo("/profesiones", forceLoad: true);
        }
    }
}
