@page "/tipoestudios/editar/{rowKey}"

@inject ITipoEstudioService servicioTipoEstudio
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Editar Tipo de Estudio</h3>

@if (tipoEstudio != null)
{
    <EditForm EditContext="contextoEdicion">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label>Nombre:</label>
            <div>
                <InputText class="form-control" @bind-Value="@tipoEstudio.Nombre" />
                <ValidationMessage For="@(() => tipoEstudio.Nombre)" />
            </div>
        </div>
        <div class="mb-3">
            <label>Estado:</label>
            <div>
                <select class="form-control" @bind="@tipoEstudio.Estado">
                    <option value="Activo">Activo</option>
                    <option value="Inactivo">Inactivo</option>
                </select>
            </div>
        </div>
        <button class="btn btn-primary" @onclick="EditarTipoEstudio">Editar</button>
        <button class="btn btn-primary" @onclick="CancelarEdicion">Cancelar</button> <!-- Modificado -->
    </EditForm>
}
else
{
    <p>Cargando...</p>
}

@code {
    private EditContext contextoEdicion;
    private TipoEstudio tipoEstudio;

    [Parameter]
    public string rowKey { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
        // Obtener datos del tipo de estudio a editar
        tipoEstudio = await servicioTipoEstudio.ObtenerTipoEstudioPorRowKey(rowKey, token);
        if (tipoEstudio != null)
        {
            contextoEdicion = new EditContext(tipoEstudio);
        }
    }

    private async Task EditarTipoEstudio()
    {
        if (contextoEdicion.Validate())
        {
            string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY"; // Reemplaza con tu token válido
            bool exito = await servicioTipoEstudio.EditarTipoEstudio(tipoEstudio, token);

            if (exito)
            {
                nav.NavigateTo("/tipoestudios");
            }
            else
            {
                await sweetAlertService.FireAsync("Error", "No se pudo editar el tipo de estudio", SweetAlertIcon.Error);
            }
        }
    }

    private async Task CancelarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de cancelar la edición? Los cambios no guardados se perderán.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            nav.NavigateTo("/tipoestudios", forceLoad: true);
        }
    }
}
