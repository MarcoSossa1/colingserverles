@page "/experiencialaboral/crear"
@inject IExperienciaLaboralService servicioExperienciaLaboral
@inject IInstitucionService servicioInstitucion
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Crear Experiencia Laboral</h3>

<EditForm EditContext="contextoEdicion">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Afiliado:</label>
        <div>
            <InputText class="form-control" @bind-Value="@experienciaLaboral.Afiliado" />
            <ValidationMessage For="@(() => experienciaLaboral.Afiliado)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Institución:</label>
        <div>
            <select class="form-control" @bind="@experienciaLaboral.Institucion">
                @foreach (var institucion in Instituciones.Where(i => i.Estado == "Activo"))
                {
                    <option value="@institucion.Nombre">@institucion.Nombre</option>
                }
            </select>
            <ValidationMessage For="@(() => experienciaLaboral.Institucion)" />
        </div>
    </div>


    <div class="mb-3">
        <label>Cargo o Título:</label>
        <div>
            <InputText class="form-control" @bind-Value="@experienciaLaboral.CargoTitulo" />
            <ValidationMessage For="@(() => experienciaLaboral.CargoTitulo)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha de Inicio:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@experienciaLaboral.FechaInicio" />
            <ValidationMessage For="@(() => experienciaLaboral.FechaInicio)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha Final:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@experienciaLaboral.FechaFinal" />
            <ValidationMessage For="@(() => experienciaLaboral.FechaFinal)" />
        </div>
    </div>

    <button class="btn btn-primary" @onclick="CrearExperienciaLaboral">Guardar</button>
    <button class="btn btn-primary" @onclick="CancelarEdicion">Cancelar</button>
</EditForm>

@code {
    private EditContext contextoEdicion;
    private ExperienciaLaboral experienciaLaboral = new();

    protected override void OnInitialized()
    {
        contextoEdicion = new EditContext(experienciaLaboral);
        experienciaLaboral.FechaInicio = DateTime.Today;
        experienciaLaboral.FechaFinal = DateTime.Today;
    }

    private List<Institucion> Instituciones { get; set; } = new List<Institucion>();

    protected override async Task OnInitializedAsync()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
        var respuesta = await servicioInstitucion.ListaInstituciones(token);
        Instituciones = respuesta.Where(i => i.Estado == "Activo").ToList();
    }

    private async Task CrearExperienciaLaboral()
    {
        if (contextoEdicion.Validate())
        {
            string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY"; // Reemplaza con tu token válido
            experienciaLaboral.PartitionKey = "ExperienciasLaborales";
            experienciaLaboral.Estado = "Activo";
            var respuesta = await servicioExperienciaLaboral.InsertarExperienciaLaboral(experienciaLaboral, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo guardar", SweetAlertIcon.Error);
                return;
            }
            nav.NavigateTo("/experiencialaboral", forceLoad: true);
        }
    }

    private async Task CancelarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de cancelar la creación de la experiencia laboral? Los cambios no guardados se perderán.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            nav.NavigateTo("/experiencialaboral", forceLoad: true);
        }
    }
}
