@page "/experienciaLaboral"
@inject IExperienciaLaboralService experienciaLaboralService
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Listar Experiencia Laboral</h3>

<div class="form-group row">
    <div class="col-sm-10">
        <a href="/experienciaLaboral/crear" class="btn btn-primary m-1">Agregar Nueva</a>
    </div>
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th><strong>Afiliado</strong></th>
                <th><strong>Institución</strong></th>
                <th><strong>Cargo/Título</strong></th>
                <th><strong>Fecha Inicio</strong></th>
                <th><strong>Fecha Final</strong></th>
                <th><strong>Estado</strong></th>
                <th><strong>Acciones</strong></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var experiencia in ExperienciasLaboralesLista)
            {
                <tr>
                    <td>@experiencia.Afiliado</td>
                    <td>@experiencia.Institucion</td>
                    <td>@experiencia.CargoTitulo</td>
                    <td>@experiencia.FechaInicio.ToShortDateString()</td>
                    <td>@experiencia.FechaFinal.ToShortDateString()</td>
                    <td>@experiencia.Estado</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>EditarExperienciaLaboral(experiencia.RowKey)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmarBorrarExperienciaLaboral(experiencia.PartitionKey, experiencia.RowKey)">Borrar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<ExperienciaLaboral> ExperienciasLaboralesLista { get; set; } = new List<ExperienciaLaboral>();

    protected override async Task OnInitializedAsync()
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
        var response = await experienciaLaboralService.ListaExperienciasLaborales(token);
        ExperienciasLaboralesLista = response;
    }

    private void EditarExperienciaLaboral(string rowKey)
    {
        navigationManager.NavigateTo($"/experienciaLaboral/editar/{rowKey}");
    }

    private async Task ConfirmarBorrarExperienciaLaboral(string partitionKey, string rowKey)
    {
        var resultado = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro de borrar esta experiencia laboral?",
                Text = "Esta acción no se puede deshacer",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "Cancelar"
            });

        if (resultado.IsConfirmed)
        {
            await BorrarExperienciaLaboral(partitionKey, rowKey);
        }
    }

    private async Task BorrarExperienciaLaboral(string partitionKey, string rowKey)
    {
        string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY"; // Obtén el token de autenticación de alguna manera
        var exito = await experienciaLaboralService.BorrarExperienciaLaboral(partitionKey, rowKey, token);

        if (exito)
        {
            navigationManager.NavigateTo("/experienciaLaboral", forceLoad: true);
        }
        else
        {
            await sweetAlertService.FireAsync("Error", "No se pudo borrar la experiencia laboral", SweetAlertIcon.Error);
        }
    }
}
