@page "/oferta-laboral/crear"
@using Coling.Shared
@inject IOfertaLaboralService servicioOfertaLaboral
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Crear Oferta Laboral</h3>

<EditForm EditContext="contextoEdicion">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Institución:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@ofertaLaboral.IdInstitucion" />
            <ValidationMessage For="@(() => ofertaLaboral.IdInstitucion)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha de Oferta:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@ofertaLaboral.FechaOferta" />
            <ValidationMessage For="@(() => ofertaLaboral.FechaOferta)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha Límite:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@ofertaLaboral.FechaLimite" />
            <ValidationMessage For="@(() => ofertaLaboral.FechaLimite)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Descripción:</label>
        <div>
            <InputText class="form-control" @bind-Value="@ofertaLaboral.Descripcion" />
            <ValidationMessage For="@(() => ofertaLaboral.Descripcion)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Título de Cargo:</label>
        <div>
            <InputText class="form-control" @bind-Value="@ofertaLaboral.TituloCargo" />
            <ValidationMessage For="@(() => ofertaLaboral.TituloCargo)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Tipo de Contrato:</label>
        <div>
            <InputText class="form-control" @bind-Value="@ofertaLaboral.TipoContrato" />
            <ValidationMessage For="@(() => ofertaLaboral.TipoContrato)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Tipo de Trabajo:</label>
        <div>
            <InputText class="form-control" @bind-Value="@ofertaLaboral.TipoTrabajo" />
            <ValidationMessage For="@(() => ofertaLaboral.TipoTrabajo)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Área:</label>
        <div>
            <InputText class="form-control" @bind-Value="@ofertaLaboral.Area" />
            <ValidationMessage For="@(() => ofertaLaboral.Area)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Características:</label>
        <div>
            <InputText class="form-control" @bind-Value="@ofertaLaboral.Caracteristicas" />
            <ValidationMessage For="@(() => ofertaLaboral.Caracteristicas)" />
        </div>
    </div>

    <button class="btn btn-primary" @onclick="CrearOfertaLaboral">Guardar</button>
    <button class="btn btn-primary" @onclick="CancelarEdicion">Cancelar</button>
</EditForm>

@code {
    private EditContext contextoEdicion;
    private OfertaLaboral ofertaLaboral = new OfertaLaboral();
    protected override void OnInitialized()
    {
        contextoEdicion = new EditContext(ofertaLaboral);
        ofertaLaboral.FechaOferta = DateTime.Today;
        ofertaLaboral.FechaLimite = DateTime.Today;
    }

    private async Task CrearOfertaLaboral()
    {
        if (contextoEdicion.Validate())
        {
            string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
            ofertaLaboral.Estado = "Activo";
            var respuesta = await servicioOfertaLaboral.InsertarOfertaLaboral(ofertaLaboral, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo guardar la oferta laboral", SweetAlertIcon.Error);
                return;
            }
            nav.NavigateTo("/ofertas-laborales", forceLoad: true);
        }
    }

    private async Task CancelarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de cancelar la creación de la oferta laboral? Los cambios no guardados se perderán.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            nav.NavigateTo("/ofertas-laborales", forceLoad: true);
        }
    }
}
