@page "/solicitud/crear"
@using Coling.Shared
@inject ISolicitudService servicioSolicitud
@inject NavigationManager nav
@inject SweetAlertService sweetAlertService

<h3>Crear Solicitud</h3>

<EditForm EditContext="contextoEdicion">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Id Afiliado:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@solicitud.IdAfiliado" />
            <ValidationMessage For="@(() => solicitud.IdAfiliado)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Id Oferta:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@solicitud.IdOferta" />
            <ValidationMessage For="@(() => solicitud.IdOferta)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Nombre:</label>
        <div>
            <InputText class="form-control" @bind-Value="@solicitud.Nombre" />
            <ValidationMessage For="@(() => solicitud.Nombre)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Fecha de Postulación:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@solicitud.FechaPostulacion" />
            <ValidationMessage For="@(() => solicitud.FechaPostulacion)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Pretensión Salarial:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@solicitud.PretencionSalarial" />
            <ValidationMessage For="@(() => solicitud.PretencionSalarial)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Acerca de:</label>
        <div>
            <InputText class="form-control" @bind-Value="@solicitud.Acercade" />
            <ValidationMessage For="@(() => solicitud.Acercade)" />
        </div>
    </div>
    <button class="btn btn-primary" @onclick="CrearSolicitud">Guardar</button>
    <button class="btn btn-primary" @onclick="CancelarEdicion">Cancelar</button>
</EditForm>

@code {
    private EditContext contextoEdicion;
    private Solicitud solicitud = new Solicitud();

    protected override void OnInitialized()
    {
        contextoEdicion = new EditContext(solicitud);
        solicitud.FechaPostulacion = DateTime.Today;
    }

    private async Task CrearSolicitud()
    {
        if (contextoEdicion.Validate())
        {
            string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c3VhcmlvIjoibWFyY28iLCJyb2wiOiJBZG1pbiIsImVzdGFkbyI6IkFjdGl2byIsImV4cCI6MTcxNDY5ODU1N30.MXG3tCUNsze-FNZo_E-2D7SJpOLPCclRbNvnbU1P4iY";
            solicitud.Estado = "Activo";
            var respuesta = await servicioSolicitud.InsertarSolicitud(solicitud, token);
            if (!respuesta)
            {
                await sweetAlertService.FireAsync("Error", "No se pudo guardar la solicitud", SweetAlertIcon.Error);
                return;
            }
            nav.NavigateTo("/solicitudes", forceLoad: true);
        }
    }

    private async Task CancelarEdicion()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de cancelar la creación de la solicitud? Los cambios no guardados se perderán.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            nav.NavigateTo("/solicitudes", forceLoad: true);
        }
    }
}
